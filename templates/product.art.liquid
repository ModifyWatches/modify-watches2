<!-- /templates/product.liquid -->
{% comment %}

  Rich snippets (itemscope, itemtype, etc.) for products are a theme requirement,
  and allow search engines to easily understand what the content is.

  For more information on these Scheme.org tags, visit:
    - http://schema.org/docs/gs.html

{% endcomment %}
{% assign collab = product.vendor | handleize %}
{% assign artwork = product.title %}
<div itemscope itemtype="http://schema.org/Product">

  <meta itemprop="url" content="{{ shop.url }}{{ product.url }}">
  <meta itemprop="image" content="{{ product.featured_image.src | img_url: 'grande' }}">

  {% comment %}
    Get first variant, or deep linked one
  {% endcomment %}
  {% assign current_variant = product.selected_or_first_available_variant %}

  {% include 'breadcrumb' %}

  <div class="grid-uniform">
    <div class="grid__item large--grid-uniform text-center large--two-thirds medium--two-thirds small--one-whole">
      <div class="product-single__photos" id="ProductPhoto">
        {% assign featured_image = current_variant.featured_image | default: product.featured_image %}
        <img src="{{ featured_image | img_url: 'large' }}" alt="{{ featured_image.alt | escape }}" id="ProductPhotoImg" class="fullArtImage">
      </div>
    </div>

    <div class="grid__item large--grid-uniform text-left large--one-third  medium--one-third small--one-whole">
	
	<div class="artInfo text-left one-whole small--text-center">
      <h1 itemprop="name">{{ product.title }}</h1>
      <div class="collectNames small--text-center">
			<div class="iconHolder2">
			 	<img src="{{ collections[collab].image | img_url: 'medium' }}" alt="{{ collection.title }} tile image" class=" roundedBorder">
			</div>
			<div class="namesHolder2">
			 	<h3 class="small--text-center">By <a href="{{ collections[collab].url}}" > {{ product.vendor }} </a></h3>
			 	{% include 'new-follow' %}
			</div>
			<div style="clear:both"></div>
	
      <div class="grid__item large--one-whole text-left small--text-center" style="margin:0 auto">
      <p>Help share {{ collections[collab].title }}'s story
      <div class="share-buttons share-buttons-panel" data-style="big" data-counter="false" data-oauth="true" data-hover="true" data-promo-callout="none" data-buttons="twitter,facebook,pinterest"></div>
		</p>
		</div>
	</div>	
     </div>
       </div>
</div>
		    <div class="grid__item large--grid-uniform text-center big-margin">
	   		<h3>Available as</h3>
	   		<div class="grid-uniform big-padding">
		   	{% assign grid_item_width = 'large--one-quarter medium--one-third small--one-half' %}
			
				<ul class="collection-matrix">
				 {% for product in collections[collab].products %}
				   
				 	{% if product.tags contains artwork %}
				 	
				 <li id="product-{{ forloop.index | plus:paginate.current_offset }}" class="grid__item {{ grid_item_width }}">
				  {% include 'product-grid-item' %}
				 </li> 
				 	{% endif %}
				 {% endfor %}
				  <div style="clear: both"></div>
				        
				
				 <div style="clear: both"></div>
				</ul>
				
				<div id="product-list-foot"></div>
			

		    </div>
		   
		   
      {% comment %}
        If the user is on a collection product page (ie with /collections/collection-handle/products/product-handle)
        in the URL, we can show next/previous links to other products in the collection.
     
      {% if collection %}
        {% if collection.previous_product or collection.next_product %}
          <p>
            {% if collection.previous_product %}
              <span class="left">
                {{ 'products.general.previous_product_html' | t | link_to: collection.previous_product }}
              </span>
            {% endif %}
            {% if collection.next_product %}
              <span class="right">
                {{ 'products.general.next_product_html' | t | link_to: collection.next_product }}
              </span>
            {% endif %}
          </p>
        {% endif %}
      {% endif %}
	   {% endcomment %}
    </div>
  </div>

</div>

{% comment %}
  To take advantage of a callback on the select dropdown, add option_selection.js
  and customize the JS in timber.productPage as needed.

  Currently, timber.productPage does the following:
    - Hides your <select> tag from above
    - Breaks out the product variants into separate product options, if more than one exists
    - Generates a <select> tag for each product option
    - Enables/disables elements based on variant availability

  Callback notes:
    - Keep the callback available to the global scope (window.selectCallback) so that advanced
      addons can override it.
      * E.g. multiple currencies http://docs.shopify.com/manual/configuration/store-customization/currencies-and-translations/currencies/how-to-toggle-between-two-currencies
{% endcomment %}
{{ 'option_selection.js' | shopify_asset_url | script_tag }}

 <!-- Segmeent Product Event -->
    <script type="text/javascript">
      
      analytics.page('Art', {
        id: "{{ product.id }}",
        name: "{{ product.title }}",
        type: "{{ product.type }}",
        vendor: "{{ product.vendor }}",
        vertical: "{{ vertical }}"
      });
    </script>